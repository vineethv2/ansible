	[student@workstation file-manage]$ ansible-playbook --syntax-check  secure_log_backups.yml

	########################################################################################################################

	[student@workstation file-manage]$ tree -F secure-backups


1)	########################################################################################################################
	[student@workstation file-manage]$vim selinux_defaults.yml 		file module: is like chcon
		---
		- name: Using the file module to ensure SELinux file context
	  	  hosts: all
	  	  remote_user: root
	  	  tasks:

			- name: Touch a file and set permissions (like touch)
			  file:
				path: /path/to/file
				owner: user1
				group: group1
				mode: 0640
				state: touch

			- name: Ensure /etc/issue.net is a symlink to /etc/issue
			  file:
				src: /etc/issue
				dest: /etc/issue.net
				state: link
				owner: root
				group: root
				force: yes

			- name: SELinux file context is set to defaults
		  	  file:
		  		path: /home/devops/users.txt
		  		seuser: _default
				serole: _default
				setype: _default
				selevel: _default

			- name: SELinux type is set to samba_share_t
			  file:
				path: /path/to/samba_file
				setype: samba_share_t

	Refer: ansible-doc copy 

	########################################################################################################################	

	[student@workstation file-manage]$vim selinux.yml 			--> like semange fcontext
		---
		- name: SELinux type is persistently set to samba_share_t
	  	  hosts: all
	  	  remote_user: root
	  	  tasks:
			- name: SELinux type is persistently set to samba_share_t 		
			  sefcontext:
				target: /path/to/samba_file
				setype: samba_share_t
				state: present



		The sefcontext module updates the default context for the target in the SELinux policy, but does not change the context on existing files.




2)	########################################################################################################################

	[student@workstation file-manage]$vim copy_file.yml  	

		---
		- name: Using the copy module
		  hosts: all
		  remote_user: root
		  tasks:


			- name: Copy a file to managed hosts
			  copy:
				src: file
				dest: /path/to/file
				force: no			--> then it only copies the file to the managed host if it does not already exist.

			- name: Copy a file to managed hosts and set attributes
		 	  copy:
				src: files/users.txt
				dest: /home/devops/users.txt
				owner: devops
				group: devops
				mode: u+rw,g-wx,o-rwx
				setype: samba_share_t


			- 


	[student@workstation file-manage]$ansible all -m command -a 'ls -Z' -u devops


3)	########################################################################################################################	



	[student@workstation file-manage]$vim secure_log_backups.yml 
		---
		- name: Use the fetch module to retrieve secure log files
		  hosts: all
		  remote_user: root
		  tasks:
			- name: Fetch the /var/log/secure log file from managed hosts
	 	  	  fetch:
				src: /var/log/secure
				dest: secure-backups
				flat: no
		

	
	
4)	########################################################################################################################
	[student@workstation file-manage]$vim add_line.yml 

		---
		- name: Add text to an existing file
	  	  hosts: all
	  	  remote_user: devops
	  	  tasks:
			- name: Add a single line of text to a existing file
		  	  lineinfile:
				path: /home/devops/users.txt
				line: This line was added by the lineinfile module.
				state: present

5)	########################################################################################################################
	[student@workstation file-manage]$vim add_block.yml 



		---
		- name: Add block of text to a file
		  hosts: all
		  remote_user: devops
		  tasks:
			- name: Add a block of text to an existing file
			  blockinfile:
				path: /home/devops/users.txt
				block: |
						This block of text consists of two lines.
						They have been added by the blockinfile module.
				state: present


	[student@workstation file-manage]$ ansible all -m command  -a 'cat users.txt' -u devops

5)	########################################################################################################################
	[student@workstation file-manage]$vim


		---
		- name: Use the file module to remove a file
		  hosts: all
		  remote_user: devops
		  tasks:
			- name: Remove a file from managed hosts
			  file:
				path: /home/devops/users.txt
				state: absent




6)	########################################################################################################################
	[student@workstation file-manage]$vim



		---
		- name: Use the file module to remove a file
		  hosts: all
		  remote_user: devops
		  tasks:	
			- name: Verify the checksum of a file
			  stat:
				path: /path/to/file
				#checksum_algorithm: md5
			  register: result
			
			- debug
				msg: "The checksum of the file is {{ result.stat.checksum }}"


			or
			- name: Display stat results
			  debug:
			 	var: result



7)	########################################################################################################################
	[student@workstation file-manage]$vim



		---
		- name: Use the file module to remove a file
		  hosts: all
		  remote_user: devops
		  tasks:	
			- name: synchronize local file to remote files
			  synchronize:
				src: file
				dest: /path/to/file

8)	########################################################################################################################
	[student@workstation file-manage]$vim


		---
		- name: Use the file module to remove a file
		  hosts: all
		  remote_user: devops
		  tasks:
			- name: Template a file to /etc/files.conf
			  template:
			    src: /mytemplates/foo.j2
			    dest: /etc/file.conf
			    owner: bin
			    group: wheel
			    mode: '0644'






#####################################################################################################################################################
#####################################################################################################################################################


#####################################################################################################################################################
#####################################################################################################################################################
		ansible-doc template.


	[student@workstation file-template]$vim ansible.cfg

		[defaults]
		inventory=inventory
		ansible_managed = Ansible managed - modified on %Y-%m-%d %H:%M:%S 



	[student@workstation file-template]$ vim motd.yml 


			---
			- name:
			  hosts: all
			  remote_user: root
			  gather_facts: yes
			  vars:
			    - mysappiovar: testing
			  tasks:
			    - name: "example 1- variables"
			      template: 
			        src: jinja1.j2
			        dest: /tmp/f1
			        owner: root
			        group: root
			        mode: 0600
			    - name: "example 2- loop-File System"
			      template: 
			        src: jinja2.j2
			        dest: /tmp/f2
			        owner: root
			        group: root
			        mode: 0600
			    - name: "example 3- loop-hosts"
			      template: 
			        src: jinja3.j2
			        dest: /tmp/f3
			        owner: root
			        group: root
			        mode: 0600



	[student@workstation file-template]$ vim jinja1.j2


			displays local variable: {{ mysappiovar }}


			displays anisble variable from ansible config file:  {{ ansible_managed }} 

			This is a 		:		 {{ ansible_facts['distribution'] }} version
						:		 {{ ansible_facts['distribution_version'] }} system.

			my system name is	: 		"{{ ansible_fqdn }}"
			my system name is 	:		"{{ ansible_facts['fqdn'] }}"
			

			my hostname  name is	: 		"{{ ansible_facts['hostname'] }}"

			address are displayed	: 		"{{ ansible_facts['default_ipv4']['address'] }}"  

			System total memory	: 		 {{ ansible_facts['memtotal_mb'] }} MiB.
			System processor count	: 		 {{ ansible_facts['processor_count'] }}



			This is the system {{ ansible_facts['fqdn'] }}.
			
			
			Only use this system with permission.
			You can request access from {{ system_owner }}.


	[student@workstation file-template]$ vim jinja2.j2



			{% for mounts in  ansible_mounts  %}
			 Mountpoint: {{ mounts.mount }}  and the  Filesystem: {{ mounts.fstype }}
			{% endfor %}

	[student@workstation file-template]$ vim jinja3.j2

			{% for host  in  groups['all']  %}
 
			{{ hostvars[host]['ansible_facts']['default_ipv4']['address'] }}
			{{ hostvars[host]['ansible_facts']['fqdn'] }}
			{{ hostvars[host]['ansible_facts']['hostname'] }}

			{% endfor %}

	[student@workstation file-template]$ vim jinja4.j2


			{% if finished %}
			{{ result }}
			{% endif %}
			------------------------------------------------------------
			{% if condition %}
			    do_some_thing
			{% elif condition2 %}
			    do_another_thing
			{% else %}
			    do_something_else
			{% endif %}
			------------------------------------------------------------

			{% for myhost in groups['myhosts'] %}
			{{ myhost }}
			{% endfor %}
			------------------------------------------------------------
			{% for myuser in users if not myuser == "root" %}
			User number {{ loop.index }} - {{ myuser }}
			{% endfor %}





			{% if param1 is defined and param2 is defined and param3 is defined %}
			  myvariable: 'param1,param2,param3'
			{% elif param1 is defined and param2 is defined %}
			  myvariable: 'param1,param2'
			{% elif param1 is defined %}
			  myvariable: 'param1'
			{% else %}
			  myvariable: 'default-param'
			{% endif %} 


	[student@workstation file-template]$ansible-playbook playbook.yml -e "param1=value1 param2=value2 param3=value3"



#####################################################################################################################################################
#####################################################################################################################################################


#####################################################################################################################################################
#####################################################################################################################################################





Example
Here is a small example of a template file example.html.jinja:[7]

<!DOCTYPE html>
<html>
  <head>
    <title>{{ variable|escape }}</title>
  </head>
  <body>
  {%- for item in item_list %}
    {{ item }}{% if not loop.last %},{% endif %}
  {%- endfor %}
  </body>
</html>
and templating code:

from jinja2 import Template
with open('example.html.jinja') as f:
    tmpl = Template(f.read())
print tmpl.render(
    variable = 'Value with <unsafe> data',
    item_list = [1, 2, 3, 4, 5, 6]
)
This produces the HTML string:

<!DOCTYPE html>
<html>
  <head>
    <title>Value with &lt;unsafe&gt; data</title>
  </head>
  <body>
    1,
    2,
    3,
    4,
    5,
    6
  </body>
</html>















